name: Recette Branch workflow

on:
  push:
    branches:
      - recette
    paths-ignore:
      - '**'

jobs:
  build:
    # if: github.event.before == 'refs/heads/dev'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Verify Docker login
      run: docker info

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        mkdir -p secrets
        echo "${{ secrets.DB_PASSWORD_DEV }}" > secrets/db_password
        docker build --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD_DEV }} -t djlopezz/cicdm1 .
        docker push djlopezz/cicdm1

  website-ready:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Wait for website to be ready
      run: |
        for i in {1..30}; do
          if curl -sSf "https://cicdm1.onrender.com" > /dev/null; then
            echo "Website is ready!";
            exit 0;
          fi;
          echo "Waiting for website...";
          sleep 5;
        done;
        echo "Website did not become ready in time.";
        exit 1;
  
  load-test:
    runs-on: ubuntu-latest
    needs: [Hook, website-ready]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Trigger GitHub Hook
      run: |
        curl -X POST -H "Authorization: token ${{ secrets.DISPATCH_TOKEN }}" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/ynov-2025-m1-team7/CICD_M1_LOAD_TESTING/dispatches \
        -d '{"event_type": "load-test-trigger"}'

    - name: Upload summary.json
      uses: actions/upload-artifact@v4
      with:
        name: load-test-summary
        path: summary.json
    
  Hook:
    # if: github.event.before == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: refresh webservice
      run: |
        curl -X POST "${{ secrets.RENDER_HOOK_URL }}"

  test:
    runs-on: ubuntu-latest
    needs: [load-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23

    - name: Wait for website to be ready
      run: |
        for i in {1..60}; do
          if curl -sSf "https://cicdm1.onrender.com" > /dev/null; then
            echo "Website is ready!";
            exit 0;
          fi;
          echo "Waiting for website...";
          sleep 5;
        done;
        echo "Website did not become ready in time.";
        exit 1;

    - name: Run tests
      run: |
        go test ./... -v > test-results.txt

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results.json

  coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23

    - name: Run coverage
      run: |
        go test -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out > coverage.txt

    - name: Check test coverage
      run: |
        go test -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out > coverage.txt
        total=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        cov=${total%.*}
        if [ "$cov" -lt 60 ]; then
          echo "Test coverage is below 60% ($total%)"
          exit 1
        fi

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.txt